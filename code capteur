#include <bacarComm.h>
#include <bacarMotor.h>
#include <cmath> 
BacarMotor motorA(9, 7, 8);
BacarMotor motorB(10, 11, 12);
BacarComm comm;
bool ledState;
int capteurprox = 0; // emplacement du capteur de proximité
int devant =0; // de base on ne détécte rien
void setup() {
  serial.begin(9600);
  pinMode(capteurprox,INPUT);
  // Configure la LED pour pouvoir l'utiliser dans loop()
  pinMode(LED_BUILTIN, OUTPUT);
  ledState = LOW;
  // Initialise l'objet comm
  comm.begin();
  // Configure la LED pour pouvoir l'utiliser dans loop()
  pinMode(LED_BUILTIN, OUTPUT);
  // Initialise les objets moteurs
  motorA.begin();
  motorB.begin();
}

void loop() {
  int32_t x, y;
  float u, v;
  devant = digitalRead(capteurprox); // lit la valeur
  Serial.printlnt(devant); //print la valeur
  if (devant==HIGH){ // on ne detect rien
  if (comm.newMessage() == true) {   // Vérifie si un nouveau message de l'Orange PI a été reçu
    // On lit les 4 valeurs contenues dans le message
    x = comm.xRead();
    y = comm.yRead();
    u = comm.uRead();
    v = comm.vRead();
    if (v == 0) {
        motorA.actuate(0.2*u);
        motorB.actuate(0.01+0.2*u);
        }
    else if (v < 0) {     
        motorA.actuate(0.2*u);
        motorB.actuate(0.01-0.2*u*(pow((4/5),-v))); // Le moins évide que le moteur tourne dans l'autre sens
        }
    else {
        motorA.actuate(0.2*u*(pow((4/5),v)));
        motorB.actuate(0.01+0.2*u);
        }
        }
        }
     if (devant == LOW){ on detect un obstacle
        motorA.actuate(0);
        motorB.actuate(0);     
    // et on les renvoie à l'Orange PI
       bool x = true;
       comm.sendMessage(x, y, u, v) 
    }
}
