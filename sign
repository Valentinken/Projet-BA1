"""This is a template for Sign Detector modules.

   A Sign Detector module is a python file that contains a `detect` function
   that is capable of analyzing a color image which, according to the image
   server, likely contains a road sign. The analysis should identify the kind
   of road sign contained in the image.

   See the description of the `detect` function below for more details.

   Please note: implementors are free to add additional (auxiliary) methods and
   variables to the file (called from within the detect() function)
"""

import logging
import numpy as np
import cv2
import _tkinter

logging.info('Template SignDetector has been initialized')


def detect(bb, sign):
    """This function receives:
    - sign: a color image (numpy array of shape (h,w,3))
    - bb which is the bounding box of the sign in the original camera frame
      bb = (x0,y0, w, h) where w and h are the widht and height of the sign
      (can be used to determine e.g., whether the sign is to the left or
       right of the car's center)
    The goal of this method is to recognize which of the following signs it
    really is:
    - a stop sign
    - a turn left sign
    - a turn right sign
    - None, if the sign is determined to be none of the above

    Returns: a dictionary that contains information about the recognized
    sign. This dict is transmitted to the state machine it should contain
    all the information that the state machine to act upon the sign (e.g.,
    the type of sign, estimated distance).
    """
    import _tkinter
    M = sign
    import numpy as np
    a = M.shape
    Nligne = a[0]
    Ncolonne = a[1]
    g = l = o = fdp = 0
    """
    Test pour vérifier si l'image découpée est bien un panneau.
    Le test consiste à vérifier si l'image est suffisement intense en rouge ou en bleue, que le format correspond a un carré ou encore que la taille de l'image ne dépasse pas une certaine limite.
    Si l'image n'est pas un panneau, on return: None. Si c'est un panneau, on commence le test de différenciation des panneaux.
    """
    for i in range (Nligne):
        for j in range (Ncolonne):
            if M[i,j,0] > 60 or M[i,j,2] > 60:
                o = o + 1
    rapport = 10000*o // (Ncolonne*Nligne)
    if Nligne > (1.5*Ncolonne) or Ncolonne > (1.5*Nligne) or (rapport < 3000) or Nligne > 35 or Ncolonne > 35 or (Nligne*Ncolonne) > 750 or bb[0] < ((2*Ncolonne)/3):
        T = None
    else:
        """
        Nous commençons ici à faire la moyenne d'intensité de l'image en rouge et en bleu.
        Si la moyenne rouge est supérieur à la bleue, on return: stop.
        Si la moyenne bleue est supérieur à la rouge, on lance le test de différenciation des panneaux directionnels.
        """
        count_red = count_blue = a = 0
        for i in range (Nligne):
            for j in range (Ncolonne):
                count_blue = M[i,j,0] + count_blue
                count_red = M[i,j,2] + count_red
                a = a + 1
        av_blue = count_blue/a
        av_red = count_red/a
        if av_red > av_blue:
            T = "Stop"
        else:
            """
            Pour différencier le panneau droite du panneau gauche, nous coupons la matrice M en 2, une partie droite (Md) et une partie gauche (Mg).
            """
            Mg = M[:,:(Ncolonne//2),:]
            Md = M[:,(Ncolonne//2):,:]
            blue_pixel_l = blue_pixel_r = 0
            """
            Nous comptons ici le nombre de pixel bleus dans la partie droite et la partie gauche.
            Pour ne pas prendre en compte les pixels blancs (qui sont également intenses en bleu), on compte un pixel bleu comme un pixel intense sur la couche bleue et 1.5 fois moin intense en vert
            (le vert se trouve sur la couche 1)
            """
            for i in range (Nligne):
                for j in range (Mg.shape[1]):
                    if Mg[i,j,0] > 80 and Mg[i,j,0] > (1.5*Mg[i,j,1]):
                        blue_pixel_l = blue_pixel_l + 1
                    else:
                        pass
            for i in range (Nligne):
                for j in range (Md.shape[1]):
                    if Md[i,j,0] > 80 and Md[i,j,0] > (1.5*Md[i,j,1]):
                        blue_pixel_r = blue_pixel_r + 1
                    else:
                        pass
            if blue_pixel_l < blue_pixel_r:
                T = "left"
            else:
                T = "right"
    (x0, y0, w, h) = bb
    dist = (bb[3]/3)
    logging.info('Returning None by default')
    Q = {"sign":T}
    return Q
